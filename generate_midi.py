from music21 import *
import numpy as np

def generate_notes(model, dictionary: dict, initial_note_ascii: str, length: int) -> list:
	"""
	Generates a piece of notes given a starting note
	:param model: trained model
	:param dictionary: a dictionary mapping integer ids to ASCII ids
	:param initial_note_ascii: an initial note as an ASCII character
	:param length: desired piece length
	:return: a generated piece of ASCII characters
	"""

	sample_n = 10
	reverse_dictionary = {ascii: id for ascii, id in dictionary.items()}
	previous_state = None

	first_note_index = reverse_dictionary[initial_note_ascii]
	next_input = [[first_note_index]]
	ascii_piece = [initial_note_ascii]

	for i in range(length):
		probs, previous_state = model.call(next_input, previous_state)
		probs = np.array(probs[0, 0, :])
		top_note_ids = np.argsort(probs)[-sample_n:]
		top_probs = np.exp(probs[top_note_ids]) / sum(np.exp(probs[top_note_ids]))
		next_chord_index = np.random.choice(top_note_ids, p=top_probs)

		ascii_piece.append(dictionary[next_chord_index])
		next_input = [[next_chord_index]]
	return ascii_piece


def id_to_ascii(id_piece: list, dictionary: dict) -> list:
	"""
	Turn a generated piece of ids into a piece of ASCIIs
	:param id_piece: a piece generated by the model in id form
	:param dictionary: a dictionary mapping id to ASCII
	:return: a list of ascii characters
	"""
	ascii_piece = [dictionary[id] for id in id_piece]
	return ascii_piece


def id_to_duration(id_durations: list, dictionary: dict) -> list:
	"""
	Turn a generated list of duratino ids into a list of durations
	:param id_durations: a list of durations by the model in id form
	:param dictionary: a dictionary mapping id to duration
	:return: a list of durations
	"""
	durations = [dictionary[id] for id in id_durations]
	return durations

def ascii_to_m21(notes, durations=None):
	# can i assume start, stop, and pad are in neither notes nor durations?
	for i, chord in enumerate(notes):
		if len(chord) > 1:
			chord = note.Chord()
			split = list(chord)
			for note in split:
	pass


def make_midi():
	"""
	Combines notes and duration and makes the midi file.
	:return:
	"""
	pass

